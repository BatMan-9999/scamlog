// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// id          String   @id @default(auto()) @map("_id") @db.ObjectId

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ScamServer {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdByUser   User?    @relation(fields: [createdByUserId], references: [id])
  createdByUserId String   @db.ObjectId
  serverId        String   @unique
  adminIds        String[]
  inviteCodes     String[]
  name            String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  evidenceLinks   String[]
}

model ServerReport {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdByUser   User?    @relation(fields: [createdByUserId], references: [id])
  createdByUserId String   @db.ObjectId
  serverId        String
  adminIds        String[]
  inviteCodes     String[]
  name            String
  evidenceLinks   String[]
  createdAt       DateTime @default(now())
}

model FeaturedServer {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  banner      String?
  serverId    String
  inviteUrl   String
  partnered   Boolean @default(false)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  ScamServer    ScamServer[]
  Account       Account[]
  Session       Session[]
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  ServerReport  ServerReport[]
  AdminUser     AdminUser?
}

// Next-Auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminUser {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  user        User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String          @unique
  discordId   String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  permissions UserPermissions @default(READ)
}

// ENUMS \\
enum UserPermissions {
  READ
  WRITE // Includes update privledges
  // If the createdBy field is blank, assume created by SYSTEM
  // Only system can delete when created by SYSTEM
  // Users can always delete their own
  DELETE // Remove other people's db submissions
}

enum ServerType {
  QR // Standard QR code token loggers
  FAKENITRO // Fake nitro
  OAUTH // OAuth2 scams, such as force joins
  VIRUS // Servers which distribute RATs & viruses. Prefer NSFW
  NSFW // NSFW, nudes, etc.
  SPAM // Mass advertising or spam servers

  OTHER // Catchall
}
